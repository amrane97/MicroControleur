
PROJET_MP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001e8c  08001e8c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e8c  08001e8c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e90  08001e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  08001e98  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001e98  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043ac  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d0  00000000  00000000  000243d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  000256a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  00025c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db7e  00000000  00000000  00026190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005530  00000000  00000000  00033d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000473af  00000000  00000000  0003923e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000805ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c8  00000000  00000000  00080640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e50 	.word	0x08001e50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001e50 	.word	0x08001e50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ADC_init>:
#include "adc_init.h"

void ADC_init(ADC_TypeDef * adc, uint8_t resolution, uint8_t channel){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	0008      	movs	r0, r1
 800022a:	0011      	movs	r1, r2
 800022c:	1cfb      	adds	r3, r7, #3
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	1cbb      	adds	r3, r7, #2
 8000234:	1c0a      	adds	r2, r1, #0
 8000236:	701a      	strb	r2, [r3, #0]

	RCC->APB2ENR |= RCC_APB2ENR_ADCEN; // configuration de convertisseur
 8000238:	4b37      	ldr	r3, [pc, #220]	; (8000318 <ADC_init+0xf8>)
 800023a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800023c:	4b36      	ldr	r3, [pc, #216]	; (8000318 <ADC_init+0xf8>)
 800023e:	2180      	movs	r1, #128	; 0x80
 8000240:	0089      	lsls	r1, r1, #2
 8000242:	430a      	orrs	r2, r1
 8000244:	635a      	str	r2, [r3, #52]	; 0x34

	adc->CFGR2|=(0b11<<ADC_CFGR2_CKMODE_Pos); // choix de l'horloge
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	22c0      	movs	r2, #192	; 0xc0
 800024c:	0612      	lsls	r2, r2, #24
 800024e:	431a      	orrs	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	611a      	str	r2, [r3, #16]
	adc->CFGR1|=(0b11<<13);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	22c0      	movs	r2, #192	; 0xc0
 800025a:	01d2      	lsls	r2, r2, #7
 800025c:	431a      	orrs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	60da      	str	r2, [r3, #12]

	// calibrage
	if((ADC1->CR & ADC_CR_ADEN) != 0) {
 8000262:	4b2e      	ldr	r3, [pc, #184]	; (800031c <ADC_init+0xfc>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	2201      	movs	r2, #1
 8000268:	4013      	ands	r3, r2
 800026a:	d005      	beq.n	8000278 <ADC_init+0x58>
		ADC1->CR &= ~(uint32_t)ADC_CR_ADEN;
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <ADC_init+0xfc>)
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <ADC_init+0xfc>)
 8000272:	2101      	movs	r1, #1
 8000274:	438a      	bics	r2, r1
 8000276:	609a      	str	r2, [r3, #8]
		}
	ADC1->CR |= ADC_CR_ADCAL; // activation de la conversion continue
 8000278:	4b28      	ldr	r3, [pc, #160]	; (800031c <ADC_init+0xfc>)
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <ADC_init+0xfc>)
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0609      	lsls	r1, r1, #24
 8000282:	430a      	orrs	r2, r1
 8000284:	609a      	str	r2, [r3, #8]
	// Attente ADCAL = 0 (fin calibration)

	// choix de la resolution
	while ((ADC1->CR & ADC_CR_ADCAL) != 0);
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	4b24      	ldr	r3, [pc, #144]	; (800031c <ADC_init+0xfc>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	2b00      	cmp	r3, #0
 800028e:	dbfb      	blt.n	8000288 <ADC_init+0x68>

			if(resolution==12){
 8000290:	1cfb      	adds	r3, r7, #3
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b0c      	cmp	r3, #12
 8000296:	d104      	bne.n	80002a2 <ADC_init+0x82>
				adc->CFGR1|=(0b00<<ADC_CFGR1_RES_Pos);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68da      	ldr	r2, [r3, #12]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	e01f      	b.n	80002e2 <ADC_init+0xc2>
			}
			else if(resolution==10){
 80002a2:	1cfb      	adds	r3, r7, #3
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b0a      	cmp	r3, #10
 80002a8:	d106      	bne.n	80002b8 <ADC_init+0x98>
				adc->CFGR1|=(0b01<<ADC_CFGR1_RES_Pos);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	2208      	movs	r2, #8
 80002b0:	431a      	orrs	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	e014      	b.n	80002e2 <ADC_init+0xc2>
			}
			else if(resolution==8){
 80002b8:	1cfb      	adds	r3, r7, #3
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b08      	cmp	r3, #8
 80002be:	d106      	bne.n	80002ce <ADC_init+0xae>
				adc->CFGR1|=(0b10<<ADC_CFGR1_RES_Pos);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2210      	movs	r2, #16
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	e009      	b.n	80002e2 <ADC_init+0xc2>
			}
			else if(resolution==6){
 80002ce:	1cfb      	adds	r3, r7, #3
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b06      	cmp	r3, #6
 80002d4:	d105      	bne.n	80002e2 <ADC_init+0xc2>
				adc->CFGR1|=(0b11<<ADC_CFGR1_RES_Pos);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	2218      	movs	r2, #24
 80002dc:	431a      	orrs	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60da      	str	r2, [r3, #12]
			}

			adc->CHSELR|=(0b01<<channel); //selection du channel
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e6:	1cba      	adds	r2, r7, #2
 80002e8:	7812      	ldrb	r2, [r2, #0]
 80002ea:	2101      	movs	r1, #1
 80002ec:	4091      	lsls	r1, r2
 80002ee:	000a      	movs	r2, r1
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
			adc->CR|=(0b01<<ADC_CR_ADEN_Pos); //activation du convertisseur
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	2201      	movs	r2, #1
 80002fc:	431a      	orrs	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	609a      	str	r2, [r3, #8]
			adc->CR|=(0b01<<ADC_CR_ADSTART_Pos);//lancement de conversion
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2204      	movs	r2, #4
 8000308:	431a      	orrs	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	609a      	str	r2, [r3, #8]
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b002      	add	sp, #8
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000
 800031c:	40012400 	.word	0x40012400

08000320 <init_entree>:
#include "afficheur.h"
#include "stm32l0xx_ll_exti.h"
#include "buzzer.h"

void init_entree (AFF_TypeDef *aff, GPIO_TypeDef * port, uint8_t pn1, uint8_t pn2, uint8_t pn3, uint8_t pn4)
{
 8000320:	b5b0      	push	{r4, r5, r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	0019      	movs	r1, r3
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	1dbb      	adds	r3, r7, #6
 8000332:	1c0a      	adds	r2, r1, #0
 8000334:	701a      	strb	r2, [r3, #0]

	aff -> gpioPort = port;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	601a      	str	r2, [r3, #0]
	aff -> pin5 = pn1;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	1dfa      	adds	r2, r7, #7
 8000340:	7812      	ldrb	r2, [r2, #0]
 8000342:	711a      	strb	r2, [r3, #4]
	aff -> pin6 = pn2;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1dba      	adds	r2, r7, #6
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	715a      	strb	r2, [r3, #5]
	aff -> pin7 = pn3;
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	2020      	movs	r0, #32
 8000350:	2508      	movs	r5, #8
 8000352:	197b      	adds	r3, r7, r5
 8000354:	181b      	adds	r3, r3, r0
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	7193      	strb	r3, [r2, #6]
	aff -> pin8 = pn4;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2424      	movs	r4, #36	; 0x24
 800035e:	197a      	adds	r2, r7, r5
 8000360:	1912      	adds	r2, r2, r4
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	71da      	strb	r2, [r3, #7]

	//1-déterminer le numéro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port = ((uint32_t) port - IOPPERIPH_BASE) / 0x400;
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	22b0      	movs	r2, #176	; 0xb0
 800036a:	0612      	lsls	r2, r2, #24
 800036c:	4694      	mov	ip, r2
 800036e:	4463      	add	r3, ip
 8000370:	0a9a      	lsrs	r2, r3, #10
 8000372:	2117      	movs	r1, #23
 8000374:	187b      	adds	r3, r7, r1
 8000376:	701a      	strb	r2, [r3, #0]

	//2-activation de l'horloge
	RCC->IOPENR |= 1 << nb_port;
 8000378:	4b5d      	ldr	r3, [pc, #372]	; (80004f0 <init_entree+0x1d0>)
 800037a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037c:	187b      	adds	r3, r7, r1
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2101      	movs	r1, #1
 8000382:	4099      	lsls	r1, r3
 8000384:	000b      	movs	r3, r1
 8000386:	0019      	movs	r1, r3
 8000388:	4b59      	ldr	r3, [pc, #356]	; (80004f0 <init_entree+0x1d0>)
 800038a:	430a      	orrs	r2, r1
 800038c:	62da      	str	r2, [r3, #44]	; 0x2c

	//3-configuration des pin d'entree

	aff -> gpioPort -> MODER &=~(0b11<<2*pn1);
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	4099      	lsls	r1, r3
 800039e:	000b      	movs	r3, r1
 80003a0:	43db      	mvns	r3, r3
 80003a2:	0019      	movs	r1, r3
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	400a      	ands	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
	aff -> gpioPort -> MODER |= (0b01<<2*pn1);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	4099      	lsls	r1, r3
 80003bc:	000b      	movs	r3, r1
 80003be:	0019      	movs	r1, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]

	aff -> gpioPort -> MODER &=~(0b11<<2*pn2);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	4099      	lsls	r1, r3
 80003d8:	000b      	movs	r3, r1
 80003da:	43db      	mvns	r3, r3
 80003dc:	0019      	movs	r1, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
	aff -> gpioPort -> MODER |= (0b01<<2*pn2);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	1dbb      	adds	r3, r7, #6
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2101      	movs	r1, #1
 80003f4:	4099      	lsls	r1, r3
 80003f6:	000b      	movs	r3, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]

	aff -> gpioPort -> MODER &=~(0b11<<2*pn3);
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	197b      	adds	r3, r7, r5
 800040a:	181b      	adds	r3, r3, r0
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2103      	movs	r1, #3
 8000412:	4099      	lsls	r1, r3
 8000414:	000b      	movs	r3, r1
 8000416:	43db      	mvns	r3, r3
 8000418:	0019      	movs	r1, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	400a      	ands	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
	aff -> gpioPort -> MODER |= (0b01<<2*pn3);
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	197b      	adds	r3, r7, r5
 800042a:	181b      	adds	r3, r3, r0
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4099      	lsls	r1, r3
 8000434:	000b      	movs	r3, r1
 8000436:	0019      	movs	r1, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	430a      	orrs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]

	aff -> gpioPort -> MODER &=~(0b11<<2*pn4);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	197b      	adds	r3, r7, r5
 8000448:	191b      	adds	r3, r3, r4
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	4099      	lsls	r1, r3
 8000452:	000b      	movs	r3, r1
 8000454:	43db      	mvns	r3, r3
 8000456:	0019      	movs	r1, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
	aff -> gpioPort -> MODER |= (0b01<<2*pn4);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	197b      	adds	r3, r7, r5
 8000468:	191b      	adds	r3, r3, r4
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	2101      	movs	r1, #1
 8000470:	4099      	lsls	r1, r3
 8000472:	000b      	movs	r3, r1
 8000474:	0019      	movs	r1, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]

	//mettre tout à zero
	aff -> gpioPort -> ODR |= (1 << aff->pin5);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	0019      	movs	r1, r3
 800048a:	2301      	movs	r3, #1
 800048c:	408b      	lsls	r3, r1
 800048e:	0019      	movs	r1, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
	aff -> gpioPort -> ODR |= (1 << aff->pin6);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	0019      	movs	r1, r3
 80004a4:	2301      	movs	r3, #1
 80004a6:	408b      	lsls	r3, r1
 80004a8:	0019      	movs	r1, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	615a      	str	r2, [r3, #20]
	aff -> gpioPort -> ODR |= (1 << aff->pin7);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	799b      	ldrb	r3, [r3, #6]
 80004bc:	0019      	movs	r1, r3
 80004be:	2301      	movs	r3, #1
 80004c0:	408b      	lsls	r3, r1
 80004c2:	0019      	movs	r1, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
	aff -> gpioPort -> ODR |= (1 << aff->pin8);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	79db      	ldrb	r3, [r3, #7]
 80004d6:	0019      	movs	r1, r3
 80004d8:	2301      	movs	r3, #1
 80004da:	408b      	lsls	r3, r1
 80004dc:	0019      	movs	r1, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	615a      	str	r2, [r3, #20]
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b006      	add	sp, #24
 80004ec:	bdb0      	pop	{r4, r5, r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <afficher_distance>:


void afficher_distance(AFF_TypeDef *aff, int a)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]

	if (a > 240) {
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2bf0      	cmp	r3, #240	; 0xf0
 8000502:	dd38      	ble.n	8000576 <afficher_distance+0x82>
		aff->gpioPort->ODR &=~(1 << aff->pin5);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	0019      	movs	r1, r3
 8000510:	2301      	movs	r3, #1
 8000512:	408b      	lsls	r3, r1
 8000514:	43db      	mvns	r3, r3
 8000516:	0019      	movs	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	400a      	ands	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	0019      	movs	r1, r3
 800052c:	2301      	movs	r3, #1
 800052e:	408b      	lsls	r3, r1
 8000530:	43db      	mvns	r3, r3
 8000532:	0019      	movs	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	400a      	ands	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	799b      	ldrb	r3, [r3, #6]
 8000546:	0019      	movs	r1, r3
 8000548:	2301      	movs	r3, #1
 800054a:	408b      	lsls	r3, r1
 800054c:	43db      	mvns	r3, r3
 800054e:	0019      	movs	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	79db      	ldrb	r3, [r3, #7]
 8000562:	0019      	movs	r1, r3
 8000564:	2301      	movs	r3, #1
 8000566:	408b      	lsls	r3, r1
 8000568:	43db      	mvns	r3, r3
 800056a:	0019      	movs	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
		//GPIOA->ODR &=~(1<<5);//1
		//GPIOA->ODR |= (1<<6);//0
		//GPIOA->ODR |= (1<<7);//0
		//GPIOA->ODR &=~(1<<8);//1
	}
}
 8000574:	e224      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a > 220 && a <= 240){
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2bdc      	cmp	r3, #220	; 0xdc
 800057a:	dd3a      	ble.n	80005f2 <afficher_distance+0xfe>
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	2bf0      	cmp	r3, #240	; 0xf0
 8000580:	dc37      	bgt.n	80005f2 <afficher_distance+0xfe>
		aff->gpioPort->ODR |= (1 << aff->pin5);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	0019      	movs	r1, r3
 800058e:	2301      	movs	r3, #1
 8000590:	408b      	lsls	r3, r1
 8000592:	0019      	movs	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	0019      	movs	r1, r3
 80005a8:	2301      	movs	r3, #1
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	0019      	movs	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	799b      	ldrb	r3, [r3, #6]
 80005c2:	0019      	movs	r1, r3
 80005c4:	2301      	movs	r3, #1
 80005c6:	408b      	lsls	r3, r1
 80005c8:	43db      	mvns	r3, r3
 80005ca:	0019      	movs	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	0019      	movs	r1, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	408b      	lsls	r3, r1
 80005e4:	43db      	mvns	r3, r3
 80005e6:	0019      	movs	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	400a      	ands	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	e1e6      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a > 195 && a <= 220){
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2bc3      	cmp	r3, #195	; 0xc3
 80005f6:	dd3a      	ble.n	800066e <afficher_distance+0x17a>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	2bdc      	cmp	r3, #220	; 0xdc
 80005fc:	dc37      	bgt.n	800066e <afficher_distance+0x17a>
		aff->gpioPort->ODR &=~(1 << aff->pin5);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	0019      	movs	r1, r3
 800060a:	2301      	movs	r3, #1
 800060c:	408b      	lsls	r3, r1
 800060e:	43db      	mvns	r3, r3
 8000610:	0019      	movs	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin6);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	0019      	movs	r1, r3
 8000626:	2301      	movs	r3, #1
 8000628:	408b      	lsls	r3, r1
 800062a:	0019      	movs	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	0019      	movs	r1, r3
 8000640:	2301      	movs	r3, #1
 8000642:	408b      	lsls	r3, r1
 8000644:	43db      	mvns	r3, r3
 8000646:	0019      	movs	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	400a      	ands	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	79db      	ldrb	r3, [r3, #7]
 800065a:	0019      	movs	r1, r3
 800065c:	2301      	movs	r3, #1
 800065e:	408b      	lsls	r3, r1
 8000660:	43db      	mvns	r3, r3
 8000662:	0019      	movs	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	400a      	ands	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	e1a8      	b.n	80009c0 <afficher_distance+0x4cc>
	else if ( a > 170 && a <= 195) {
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2baa      	cmp	r3, #170	; 0xaa
 8000672:	dd39      	ble.n	80006e8 <afficher_distance+0x1f4>
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	2bc3      	cmp	r3, #195	; 0xc3
 8000678:	dc36      	bgt.n	80006e8 <afficher_distance+0x1f4>
		aff->gpioPort->ODR |= (1 << aff->pin5);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	0019      	movs	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	0019      	movs	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin6);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	0019      	movs	r1, r3
 80006a0:	2301      	movs	r3, #1
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	0019      	movs	r1, r3
 80006ba:	2301      	movs	r3, #1
 80006bc:	408b      	lsls	r3, r1
 80006be:	43db      	mvns	r3, r3
 80006c0:	0019      	movs	r1, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	79db      	ldrb	r3, [r3, #7]
 80006d4:	0019      	movs	r1, r3
 80006d6:	2301      	movs	r3, #1
 80006d8:	408b      	lsls	r3, r1
 80006da:	43db      	mvns	r3, r3
 80006dc:	0019      	movs	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	400a      	ands	r2, r1
 80006e4:	615a      	str	r2, [r3, #20]
 80006e6:	e16b      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a > 145 && a <= 170){
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b91      	cmp	r3, #145	; 0x91
 80006ec:	dd3a      	ble.n	8000764 <afficher_distance+0x270>
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2baa      	cmp	r3, #170	; 0xaa
 80006f2:	dc37      	bgt.n	8000764 <afficher_distance+0x270>
		aff->gpioPort->ODR &=~(1 << aff->pin5);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	0019      	movs	r1, r3
 8000700:	2301      	movs	r3, #1
 8000702:	408b      	lsls	r3, r1
 8000704:	43db      	mvns	r3, r3
 8000706:	0019      	movs	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	400a      	ands	r2, r1
 800070e:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	0019      	movs	r1, r3
 800071c:	2301      	movs	r3, #1
 800071e:	408b      	lsls	r3, r1
 8000720:	43db      	mvns	r3, r3
 8000722:	0019      	movs	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	400a      	ands	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin7);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	0019      	movs	r1, r3
 8000738:	2301      	movs	r3, #1
 800073a:	408b      	lsls	r3, r1
 800073c:	0019      	movs	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	79db      	ldrb	r3, [r3, #7]
 8000750:	0019      	movs	r1, r3
 8000752:	2301      	movs	r3, #1
 8000754:	408b      	lsls	r3, r1
 8000756:	43db      	mvns	r3, r3
 8000758:	0019      	movs	r1, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	400a      	ands	r2, r1
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	e12d      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a > 120 && a <= 145){
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b78      	cmp	r3, #120	; 0x78
 8000768:	dd39      	ble.n	80007de <afficher_distance+0x2ea>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b91      	cmp	r3, #145	; 0x91
 800076e:	dc36      	bgt.n	80007de <afficher_distance+0x2ea>
		aff->gpioPort->ODR |= (1 << aff->pin5);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	0019      	movs	r1, r3
 800077c:	2301      	movs	r3, #1
 800077e:	408b      	lsls	r3, r1
 8000780:	0019      	movs	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	430a      	orrs	r2, r1
 8000788:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	795b      	ldrb	r3, [r3, #5]
 8000794:	0019      	movs	r1, r3
 8000796:	2301      	movs	r3, #1
 8000798:	408b      	lsls	r3, r1
 800079a:	43db      	mvns	r3, r3
 800079c:	0019      	movs	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin7);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	0019      	movs	r1, r3
 80007b2:	2301      	movs	r3, #1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	0019      	movs	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	0019      	movs	r1, r3
 80007cc:	2301      	movs	r3, #1
 80007ce:	408b      	lsls	r3, r1
 80007d0:	43db      	mvns	r3, r3
 80007d2:	0019      	movs	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	400a      	ands	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	e0f0      	b.n	80009c0 <afficher_distance+0x4cc>
	else if(a > 95 && a <= 120){
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b5f      	cmp	r3, #95	; 0x5f
 80007e2:	dd39      	ble.n	8000858 <afficher_distance+0x364>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b78      	cmp	r3, #120	; 0x78
 80007e8:	dc36      	bgt.n	8000858 <afficher_distance+0x364>
		aff->gpioPort->ODR &=~(1 << aff->pin5);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	0019      	movs	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	408b      	lsls	r3, r1
 80007fa:	43db      	mvns	r3, r3
 80007fc:	0019      	movs	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin6);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	0019      	movs	r1, r3
 8000812:	2301      	movs	r3, #1
 8000814:	408b      	lsls	r3, r1
 8000816:	0019      	movs	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	430a      	orrs	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin7);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	0019      	movs	r1, r3
 800082c:	2301      	movs	r3, #1
 800082e:	408b      	lsls	r3, r1
 8000830:	0019      	movs	r1, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	430a      	orrs	r2, r1
 8000838:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	0019      	movs	r1, r3
 8000846:	2301      	movs	r3, #1
 8000848:	408b      	lsls	r3, r1
 800084a:	43db      	mvns	r3, r3
 800084c:	0019      	movs	r1, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	400a      	ands	r2, r1
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	e0b3      	b.n	80009c0 <afficher_distance+0x4cc>
	else if ( a > 70 && a <= 95){
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b46      	cmp	r3, #70	; 0x46
 800085c:	dd38      	ble.n	80008d0 <afficher_distance+0x3dc>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2b5f      	cmp	r3, #95	; 0x5f
 8000862:	dc35      	bgt.n	80008d0 <afficher_distance+0x3dc>
		aff->gpioPort->ODR |= (1 << aff->pin5);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	0019      	movs	r1, r3
 8000870:	2301      	movs	r3, #1
 8000872:	408b      	lsls	r3, r1
 8000874:	0019      	movs	r1, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin6);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	795b      	ldrb	r3, [r3, #5]
 8000888:	0019      	movs	r1, r3
 800088a:	2301      	movs	r3, #1
 800088c:	408b      	lsls	r3, r1
 800088e:	0019      	movs	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin7);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	799b      	ldrb	r3, [r3, #6]
 80008a2:	0019      	movs	r1, r3
 80008a4:	2301      	movs	r3, #1
 80008a6:	408b      	lsls	r3, r1
 80008a8:	0019      	movs	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin8);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	79db      	ldrb	r3, [r3, #7]
 80008bc:	0019      	movs	r1, r3
 80008be:	2301      	movs	r3, #1
 80008c0:	408b      	lsls	r3, r1
 80008c2:	43db      	mvns	r3, r3
 80008c4:	0019      	movs	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	400a      	ands	r2, r1
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	e077      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a > 55 && a <= 70) {
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b37      	cmp	r3, #55	; 0x37
 80008d4:	dd3a      	ble.n	800094c <afficher_distance+0x458>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b46      	cmp	r3, #70	; 0x46
 80008da:	dc37      	bgt.n	800094c <afficher_distance+0x458>
		aff->gpioPort->ODR &=~(1 << aff->pin5);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	0019      	movs	r1, r3
 80008e8:	2301      	movs	r3, #1
 80008ea:	408b      	lsls	r3, r1
 80008ec:	43db      	mvns	r3, r3
 80008ee:	0019      	movs	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	400a      	ands	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	695a      	ldr	r2, [r3, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	0019      	movs	r1, r3
 8000904:	2301      	movs	r3, #1
 8000906:	408b      	lsls	r3, r1
 8000908:	43db      	mvns	r3, r3
 800090a:	0019      	movs	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	400a      	ands	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	695a      	ldr	r2, [r3, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	799b      	ldrb	r3, [r3, #6]
 800091e:	0019      	movs	r1, r3
 8000920:	2301      	movs	r3, #1
 8000922:	408b      	lsls	r3, r1
 8000924:	43db      	mvns	r3, r3
 8000926:	0019      	movs	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	400a      	ands	r2, r1
 800092e:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin8);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	79db      	ldrb	r3, [r3, #7]
 800093a:	0019      	movs	r1, r3
 800093c:	2301      	movs	r3, #1
 800093e:	408b      	lsls	r3, r1
 8000940:	0019      	movs	r1, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	e039      	b.n	80009c0 <afficher_distance+0x4cc>
	else if (a <= 55) {
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2b37      	cmp	r3, #55	; 0x37
 8000950:	dc36      	bgt.n	80009c0 <afficher_distance+0x4cc>
		aff->gpioPort->ODR |= (1 << aff->pin5);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	791b      	ldrb	r3, [r3, #4]
 800095c:	0019      	movs	r1, r3
 800095e:	2301      	movs	r3, #1
 8000960:	408b      	lsls	r3, r1
 8000962:	0019      	movs	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin6);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	0019      	movs	r1, r3
 8000978:	2301      	movs	r3, #1
 800097a:	408b      	lsls	r3, r1
 800097c:	43db      	mvns	r3, r3
 800097e:	0019      	movs	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	400a      	ands	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR &=~(1 << aff->pin7);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	799b      	ldrb	r3, [r3, #6]
 8000992:	0019      	movs	r1, r3
 8000994:	2301      	movs	r3, #1
 8000996:	408b      	lsls	r3, r1
 8000998:	43db      	mvns	r3, r3
 800099a:	0019      	movs	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	400a      	ands	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
		aff->gpioPort->ODR |= (1 << aff->pin8);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	79db      	ldrb	r3, [r3, #7]
 80009ae:	0019      	movs	r1, r3
 80009b0:	2301      	movs	r3, #1
 80009b2:	408b      	lsls	r3, r1
 80009b4:	0019      	movs	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	615a      	str	r2, [r3, #20]
}
 80009be:	e7ff      	b.n	80009c0 <afficher_distance+0x4cc>
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <buzzer_init>:
#include "buzzer.h"


void buzzer_init(BUZZER_TypeDef *buzzer, GPIO_TypeDef *port, uint8_t pn)

{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	701a      	strb	r2, [r3, #0]

	buzzer -> gpioPort = port;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	601a      	str	r2, [r3, #0]
	buzzer -> pin = pn;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	711a      	strb	r2, [r3, #4]

	//Activation de l'horloge sur le port en question

	//d�terminer le num�ro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port=(uint32_t)((uint32_t *)port - IOPPERIPH_BASE)/ (uint32_t)0x400;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	22c0      	movs	r2, #192	; 0xc0
 80009e8:	0612      	lsls	r2, r2, #24
 80009ea:	4694      	mov	ip, r2
 80009ec:	4463      	add	r3, ip
 80009ee:	0a9a      	lsrs	r2, r3, #10
 80009f0:	2117      	movs	r1, #23
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	701a      	strb	r2, [r3, #0]

	//2-activation de l'hologe
	RCC -> IOPENR|= 1 << nb_port;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <buzzer_init+0x88>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2101      	movs	r1, #1
 8000a00:	4099      	lsls	r1, r3
 8000a02:	000b      	movs	r3, r1
 8000a04:	0019      	movs	r1, r3
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <buzzer_init+0x88>)
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en sortie

	buzzer -> gpioPort -> MODER&=~(0b11<<2*pn);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2103      	movs	r1, #3
 8000a1a:	4099      	lsls	r1, r3
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	0019      	movs	r1, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	400a      	ands	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
	buzzer -> gpioPort -> MODER|=(0b01<<2*pn);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	4099      	lsls	r1, r3
 8000a3a:	000b      	movs	r3, r1
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b006      	add	sp, #24
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <buzzer_turnOn>:

void buzzer_turnOn(BUZZER_TypeDef *buzzer){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	buzzer -> gpioPort -> ODR |=(1<<(buzzer -> pin)); // allume sur le pin 7
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	791b      	ldrb	r3, [r3, #4]
 8000a66:	0019      	movs	r1, r3
 8000a68:	2301      	movs	r3, #1
 8000a6a:	408b      	lsls	r3, r1
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	615a      	str	r2, [r3, #20]
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <buzzer_turnOff>:

void buzzer_turnOff(BUZZER_TypeDef *buzzer){
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	buzzer -> gpioPort -> ODR &=~(1<<(buzzer -> pin)); // eteint la led sur le pin 7
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	0019      	movs	r1, r3
 8000a92:	2301      	movs	r3, #1
 8000a94:	408b      	lsls	r3, r1
 8000a96:	43db      	mvns	r3, r3
 8000a98:	0019      	movs	r1, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	615a      	str	r2, [r3, #20]
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <Led_init>:
#include "led.h"

void Led_init(LED_TypeDef *led, GPIO_TypeDef * port, uint8_t pn){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	701a      	strb	r2, [r3, #0]

	led->gpioPort=port;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	601a      	str	r2, [r3, #0]
	led->pin=pn;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	711a      	strb	r2, [r3, #4]

	//Activation de l'horloge sur le port en question

	//d�terminer le num�ro du port 0--> GPIOA, 1-->GPIOB, etc.
	uint8_t nb_port;
	nb_port=(uint32_t)((uint32_t *)port - IOPPERIPH_BASE)/ (uint32_t)0x400;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	22c0      	movs	r2, #192	; 0xc0
 8000acc:	0612      	lsls	r2, r2, #24
 8000ace:	4694      	mov	ip, r2
 8000ad0:	4463      	add	r3, ip
 8000ad2:	0a9a      	lsrs	r2, r3, #10
 8000ad4:	2117      	movs	r1, #23
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	701a      	strb	r2, [r3, #0]

	//2-activation de l'hologe
	RCC->IOPENR|=1<<nb_port;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <Led_init+0x88>)
 8000adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4099      	lsls	r1, r3
 8000ae6:	000b      	movs	r3, r1
 8000ae8:	0019      	movs	r1, r3
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <Led_init+0x88>)
 8000aec:	430a      	orrs	r2, r1
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c

	//configuration de la pin en sortie
	led->gpioPort->MODER&=~(0b11<<2*pn);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2103      	movs	r1, #3
 8000afe:	4099      	lsls	r1, r3
 8000b00:	000b      	movs	r3, r1
 8000b02:	43db      	mvns	r3, r3
 8000b04:	0019      	movs	r1, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
	led->gpioPort->MODER|=(0b01<<2*pn);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4099      	lsls	r1, r3
 8000b1e:	000b      	movs	r3, r1
 8000b20:	0019      	movs	r1, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000

08000b38 <Led_turnOn>:


void Led_turnOn(LED_TypeDef *led){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	led -> gpioPort -> ODR |=(1<<(led -> pin)); // allume sur la pin x
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	0019      	movs	r1, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	615a      	str	r2, [r3, #20]
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Led_turnOff>:


void Led_turnOff(LED_TypeDef *led){
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	led -> gpioPort -> ODR &=~(1<<(led -> pin)); // eteint la led sur la pin x
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	0019      	movs	r1, r3
 8000b76:	2301      	movs	r3, #1
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	400a      	ands	r2, r1
 8000b84:	615a      	str	r2, [r3, #20]
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <Led_toggle>:

void Led_toggle(LED_TypeDef *led){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
	if (Led_isOn(led) == 1){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 f816 	bl	8000bca <Led_isOn>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d104      	bne.n	8000bae <Led_toggle+0x20>
		Led_turnOff(led);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ffdb 	bl	8000b62 <Led_turnOff>
	} else if (Led_isOn(led) == 0) {
		Led_turnOn(led);
	}

}
 8000bac:	e009      	b.n	8000bc2 <Led_toggle+0x34>
	} else if (Led_isOn(led) == 0) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 f80a 	bl	8000bca <Led_isOn>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d103      	bne.n	8000bc2 <Led_toggle+0x34>
		Led_turnOn(led);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ffbb 	bl	8000b38 <Led_turnOn>
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <Led_isOn>:

uint8_t Led_isOn(LED_TypeDef *led){
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
		if (led -> gpioPort -> IDR &(1<<(led -> pin))) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	7912      	ldrb	r2, [r2, #4]
 8000bdc:	0011      	movs	r1, r2
 8000bde:	2201      	movs	r2, #1
 8000be0:	408a      	lsls	r2, r1
 8000be2:	4013      	ands	r3, r2
 8000be4:	d001      	beq.n	8000bea <Led_isOn+0x20>
		return 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <Led_isOn+0x22>
	} else {
		return 0;
 8000bea:	2300      	movs	r3, #0
	}

}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <Led_isOff>:

uint8_t Led_isOff(LED_TypeDef *led){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
		if (led -> gpioPort -> IDR &(1<<(led -> pin))) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	7912      	ldrb	r2, [r2, #4]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2201      	movs	r2, #1
 8000c0a:	408a      	lsls	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d001      	beq.n	8000c14 <Led_isOff+0x20>
		return 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e000      	b.n	8000c16 <Led_isOff+0x22>
	} else {
		return 1;
 8000c14:	2301      	movs	r3, #1
	}
}
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <LL_RCC_HSI_Enable+0x18>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <LL_RCC_HSI_Enable+0x18>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40021000 	.word	0x40021000

08000c3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <LL_RCC_HSI_IsReady+0x1c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2204      	movs	r2, #4
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d101      	bne.n	8000c50 <LL_RCC_HSI_IsReady+0x14>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <LL_RCC_HSI_IsReady+0x16>
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	021a      	lsls	r2, r3, #8
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000c74:	430a      	orrs	r2, r1
 8000c76:	605a      	str	r2, [r3, #4]
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	ffffe0ff 	.word	0xffffe0ff

08000c88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LL_RCC_SetSysClkSource+0x24>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4393      	bics	r3, r2
 8000c98:	0019      	movs	r1, r3
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <LL_RCC_SetSysClkSource+0x24>)
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	60da      	str	r2, [r3, #12]
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40021000 	.word	0x40021000

08000cb0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <LL_RCC_GetSysClkSource+0x14>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4013      	ands	r3, r2
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <LL_RCC_SetAHBPrescaler+0x24>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	22f0      	movs	r2, #240	; 0xf0
 8000cd6:	4393      	bics	r3, r2
 8000cd8:	0019      	movs	r1, r3
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <LL_RCC_SetAHBPrescaler+0x24>)
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	60da      	str	r2, [r3, #12]
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	60da      	str	r2, [r3, #12]
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40021000 	.word	0x40021000
 8000d18:	fffff8ff 	.word	0xfffff8ff

08000d1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	60da      	str	r2, [r3, #12]
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40021000 	.word	0x40021000
 8000d44:	ffffc7ff 	.word	0xffffc7ff

08000d48 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	0c12      	lsrs	r2, r2, #16
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	041b      	lsls	r3, r3, #16
 8000d62:	0c1a      	lsrs	r2, r3, #16
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000d66:	430a      	orrs	r2, r1
 8000d68:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <LL_APB1_GRP1_EnableClock+0x28>)
 8000d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000

08000da4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <LL_APB2_GRP1_EnableClock+0x28>)
 8000dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LL_APB2_GRP1_EnableClock+0x28>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <LL_APB2_GRP1_EnableClock+0x28>)
 8000dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <LL_SYSCFG_SetEXTISource+0x48>)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	21ff      	movs	r1, #255	; 0xff
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	3302      	adds	r3, #2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	589b      	ldr	r3, [r3, r2]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	0c12      	lsrs	r2, r2, #16
 8000e18:	210f      	movs	r1, #15
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	43d2      	mvns	r2, r2
 8000e20:	401a      	ands	r2, r3
 8000e22:	0011      	movs	r1, r2
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	0c1b      	lsrs	r3, r3, #16
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <LL_SYSCFG_SetEXTISource+0x48>)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	24ff      	movs	r4, #255	; 0xff
 8000e32:	4023      	ands	r3, r4
 8000e34:	430a      	orrs	r2, r1
 8000e36:	3302      	adds	r3, #2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	501a      	str	r2, [r3, r0]
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b003      	add	sp, #12
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	40010000 	.word	0x40010000

08000e48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <LL_FLASH_SetLatency+0x24>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4393      	bics	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <LL_FLASH_SetLatency+0x24>)
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40022000 	.word	0x40022000

08000e70 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <LL_FLASH_GetLatency+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4013      	ands	r3, r2
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40022000 	.word	0x40022000

08000e88 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	ffffe7ff 	.word	0xffffe7ff

08000eb4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <LL_USART_ConfigAsyncMode+0x2c>)
 8000ede:	401a      	ands	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	222a      	movs	r2, #42	; 0x2a
 8000eea:	4393      	bics	r3, r2
 8000eec:	001a      	movs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	ffffb7ff 	.word	0xffffb7ff

08000f00 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	435b      	muls	r3, r3
 8000f14:	001a      	movs	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	400b      	ands	r3, r1
 8000f20:	001a      	movs	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	435b      	muls	r3, r3
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	434b      	muls	r3, r1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b004      	add	sp, #16
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68d9      	ldr	r1, [r3, #12]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	435b      	muls	r3, r3
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	43db      	mvns	r3, r3
 8000f56:	400b      	ands	r3, r1
 8000f58:	001a      	movs	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	435b      	muls	r3, r3
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	434b      	muls	r3, r1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	60da      	str	r2, [r3, #12]
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b004      	add	sp, #16
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff ff08 	bl	8000da4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	055b      	lsls	r3, r3, #21
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff feed 	bl	8000d78 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f871 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f925 	bl	80011f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 f8ab 	bl	8001100 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADC_init(ADC1, 8, 0);
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <main+0xe8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	2108      	movs	r1, #8
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff f935 	bl	8000220 <ADC_init>
  init_entree(&aff1, GPIOA, 5, 6, 7, 8);
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	05d9      	lsls	r1, r3, #23
 8000fba:	482e      	ldr	r0, [pc, #184]	; (8001074 <main+0xec>)
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	f7ff f9aa 	bl	8000320 <init_entree>

  buzzer_init (&buzzer, GPIOA, 9);
 8000fcc:	23a0      	movs	r3, #160	; 0xa0
 8000fce:	05d9      	lsls	r1, r3, #23
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <main+0xf0>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff fcf7 	bl	80009c8 <buzzer_init>

  Led_init(&led, GPIOA, 10);
 8000fda:	23a0      	movs	r3, #160	; 0xa0
 8000fdc:	05d9      	lsls	r1, r3, #23
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <main+0xf4>)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fd62 	bl	8000aac <Led_init>

  Led_isOn(&led);
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <main+0xf4>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fded 	bl	8000bca <Led_isOn>
  Led_isOff(&led);
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <main+0xf4>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff fdfe 	bl	8000bf4 <Led_isOff>

  while (1)
  {
    /* USER CODE END WHILE */
	 while((ADC1->ISR& ADC_ISR_EOC)==0) {}//attendre la fin de chaque conversion (ADC1 se met a 1 a la fin)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <main+0xe8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2204      	movs	r2, #4
 8001000:	4013      	ands	r3, r2
 8001002:	d0fa      	beq.n	8000ffa <main+0x72>

	 tens = ADC1 -> DR;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <main+0xe8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	001a      	movs	r2, r3
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <main+0xf8>)
 800100c:	601a      	str	r2, [r3, #0]
	 afficher_distance(&aff1, tens);
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <main+0xf8>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <main+0xec>)
 8001014:	0011      	movs	r1, r2
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff fa6c 	bl	80004f4 <afficher_distance>

	 if (tens > 220) {
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <main+0xf8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2bdc      	cmp	r3, #220	; 0xdc
 8001022:	dd08      	ble.n	8001036 <main+0xae>

		 buzzer_turnOn(&buzzer);
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <main+0xf0>)
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fd14 	bl	8000a54 <buzzer_turnOn>
		 Led_turnOn(&led);
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <main+0xf4>)
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fd82 	bl	8000b38 <Led_turnOn>
 8001034:	e018      	b.n	8001068 <main+0xe0>

	 } else if (tens < 220 && tens > 190) {
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <main+0xf8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2bdb      	cmp	r3, #219	; 0xdb
 800103c:	dc0c      	bgt.n	8001058 <main+0xd0>
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <main+0xf8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2bbe      	cmp	r3, #190	; 0xbe
 8001044:	dd08      	ble.n	8001058 <main+0xd0>
		 buzzer_turnOff(&buzzer);
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <main+0xf0>)
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fd18 	bl	8000a7e <buzzer_turnOff>
		 Led_toggle(&led);
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <main+0xf4>)
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff fd9c 	bl	8000b8e <Led_toggle>
 8001056:	e007      	b.n	8001068 <main+0xe0>

	 } else {
		 buzzer_turnOff(&buzzer);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <main+0xf0>)
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff fd0f 	bl	8000a7e <buzzer_turnOff>
		 Led_turnOff(&led);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <main+0xf4>)
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fd7d 	bl	8000b62 <Led_turnOff>
	 }

	 LL_mDelay(200);
 8001068:	20c8      	movs	r0, #200	; 0xc8
 800106a:	f000 fe95 	bl	8001d98 <LL_mDelay>
	 while((ADC1->ISR& ADC_ISR_EOC)==0) {}//attendre la fin de chaque conversion (ADC1 se met a 1 a la fin)
 800106e:	e7c3      	b.n	8000ff8 <main+0x70>
 8001070:	40012400 	.word	0x40012400
 8001074:	20000034 	.word	0x20000034
 8001078:	20000028 	.word	0x20000028
 800107c:	20000020 	.word	0x20000020
 8001080:	20000030 	.word	0x20000030

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fedd 	bl	8000e48 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	f7ff feee 	bl	8000e70 <LL_FLASH_GetLatency>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d1fb      	bne.n	8001090 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fef3 	bl	8000e88 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80010a2:	f7ff fdbd 	bl	8000c20 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	f7ff fdc8 	bl	8000c3c <LL_RCC_HSI_IsReady>
 80010ac:	0003      	movs	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1fa      	bne.n	80010a8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010b2:	2010      	movs	r0, #16
 80010b4:	f7ff fdd2 	bl	8000c5c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fe05 	bl	8000cc8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fe16 	bl	8000cf0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff fe29 	bl	8000d1c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f7ff fddc 	bl	8000c88 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	f7ff fded 	bl	8000cb0 <LL_RCC_GetSysClkSource>
 80010d6:	0003      	movs	r3, r0
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d1fa      	bne.n	80010d2 <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <SystemClock_Config+0x78>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 fe4a 	bl	8001d78 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SystemClock_Config+0x78>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 fe78 	bl	8001ddc <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80010ec:	23c0      	movs	r3, #192	; 0xc0
 80010ee:	031b      	lsls	r3, r3, #12
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fe29 	bl	8000d48 <LL_RCC_SetUSARTClockSource>
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	00f42400 	.word	0x00f42400

08001100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b08f      	sub	sp, #60	; 0x3c
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001106:	241c      	movs	r4, #28
 8001108:	193b      	adds	r3, r7, r4
 800110a:	0018      	movs	r0, r3
 800110c:	231c      	movs	r3, #28
 800110e:	001a      	movs	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	f000 fe95 	bl	8001e40 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	0018      	movs	r0, r3
 800111a:	2318      	movs	r3, #24
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f000 fe8e 	bl	8001e40 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fe25 	bl	8000d78 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff fe4e 	bl	8000dd0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2204      	movs	r2, #4
 8001138:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2202      	movs	r2, #2
 800113e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2203      	movs	r2, #3
 8001144:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2204      	movs	r2, #4
 8001156:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001158:	1d3a      	adds	r2, r7, #4
 800115a:	23a0      	movs	r3, #160	; 0xa0
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fab7 	bl	80016d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2208      	movs	r2, #8
 800116a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2202      	movs	r2, #2
 8001170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2203      	movs	r2, #3
 8001176:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2204      	movs	r2, #4
 8001188:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fa9e 	bl	80016d4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	22e1      	movs	r2, #225	; 0xe1
 800119c:	0252      	lsls	r2, r2, #9
 800119e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011a0:	0021      	movs	r1, r4
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	220c      	movs	r2, #12
 80011b8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <MX_USART2_UART_Init+0xec>)
 80011ca:	0019      	movs	r1, r3
 80011cc:	0010      	movs	r0, r2
 80011ce:	f000 fd55 	bl	8001c7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART2_UART_Init+0xec>)
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fe7b 	bl	8000ed0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <MX_USART2_UART_Init+0xec>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fe69 	bl	8000eb4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b00f      	add	sp, #60	; 0x3c
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	40004400 	.word	0x40004400

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011f6:	2418      	movs	r4, #24
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	0018      	movs	r0, r3
 80011fc:	2308      	movs	r3, #8
 80011fe:	001a      	movs	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	f000 fe1d 	bl	8001e40 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	003b      	movs	r3, r7
 8001208:	0018      	movs	r0, r3
 800120a:	2318      	movs	r3, #24
 800120c:	001a      	movs	r2, r3
 800120e:	2100      	movs	r1, #0
 8001210:	f000 fe16 	bl	8001e40 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001214:	2004      	movs	r0, #4
 8001216:	f7ff fddb 	bl	8000dd0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800121a:	2080      	movs	r0, #128	; 0x80
 800121c:	f7ff fdd8 	bl	8000dd0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fdd5 	bl	8000dd0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	2120      	movs	r1, #32
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff fe9f 	bl	8000f70 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_GPIO_Init+0xc0>)
 8001234:	0019      	movs	r1, r3
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff fde0 	bl	8000dfc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	481c      	ldr	r0, [pc, #112]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001242:	2200      	movs	r2, #0
 8001244:	0019      	movs	r1, r3
 8001246:	f7ff fe77 	bl	8000f38 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001250:	2200      	movs	r2, #0
 8001252:	0019      	movs	r1, r3
 8001254:	f7ff fe54 	bl	8000f00 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001258:	0021      	movs	r1, r4
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0192      	lsls	r2, r2, #6
 8001260:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2201      	movs	r2, #1
 8001266:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2200      	movs	r2, #0
 800126c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2202      	movs	r2, #2
 8001272:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001274:	187b      	adds	r3, r7, r1
 8001276:	0018      	movs	r0, r3
 8001278:	f000 f8ea 	bl	8001450 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800127c:	003b      	movs	r3, r7
 800127e:	2220      	movs	r2, #32
 8001280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001282:	003b      	movs	r3, r7
 8001284:	2201      	movs	r2, #1
 8001286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001288:	003b      	movs	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800128e:	003b      	movs	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001294:	003b      	movs	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800129a:	003a      	movs	r2, r7
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fa16 	bl	80016d4 <LL_GPIO_Init>

}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b009      	add	sp, #36	; 0x24
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	00040003 	.word	0x00040003
 80012b4:	50000800 	.word	0x50000800

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopForever+0xe>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopForever+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001316:	f7ff ffe4 	bl	80012e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f000 fd6d 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fe33 	bl	8000f88 <main>

08001322 <LoopForever>:

LoopForever:
    b LoopForever
 8001322:	e7fe      	b.n	8001322 <LoopForever>
  ldr   r0, =_estack
 8001324:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001330:	08001e94 	.word	0x08001e94
  ldr r2, =_sbss
 8001334:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001338:	2000003c 	.word	0x2000003c

0800133c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_COMP_IRQHandler>
	...

08001340 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <LL_EXTI_EnableIT_0_31+0x1c>)
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <LL_EXTI_EnableIT_0_31+0x1c>)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	430a      	orrs	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010400 	.word	0x40010400

08001360 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <LL_EXTI_DisableIT_0_31+0x20>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	43d9      	mvns	r1, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <LL_EXTI_DisableIT_0_31+0x20>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40010400 	.word	0x40010400

08001384 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010400 	.word	0x40010400

080013a4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40010400 	.word	0x40010400

080013c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80013d2:	6899      	ldr	r1, [r3, #8]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]

}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010400 	.word	0x40010400

080013e8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]

}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40010400 	.word	0x40010400

0800140c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40010400 	.word	0x40010400

0800142c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	43d9      	mvns	r1, r3
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800143e:	400a      	ands	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40010400 	.word	0x40010400

08001450 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001458:	230f      	movs	r3, #15
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	791b      	ldrb	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d100      	bne.n	800146a <LL_EXTI_Init+0x1a>
 8001468:	e068      	b.n	800153c <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <LL_EXTI_Init+0x24>
 8001472:	e06e      	b.n	8001552 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d01b      	beq.n	80014b4 <LL_EXTI_Init+0x64>
 800147c:	dc25      	bgt.n	80014ca <LL_EXTI_Init+0x7a>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <LL_EXTI_Init+0x38>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d00b      	beq.n	800149e <LL_EXTI_Init+0x4e>
 8001486:	e020      	b.n	80014ca <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff89 	bl	80013a4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff52 	bl	8001340 <LL_EXTI_EnableIT_0_31>
          break;
 800149c:	e01a      	b.n	80014d4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff5c 	bl	8001360 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff69 	bl	8001384 <LL_EXTI_EnableEvent_0_31>
          break;
 80014b2:	e00f      	b.n	80014d4 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ff41 	bl	8001340 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff ff5e 	bl	8001384 <LL_EXTI_EnableEvent_0_31>
          break;
 80014c8:	e004      	b.n	80014d4 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
          break;
 80014d2:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	799b      	ldrb	r3, [r3, #6]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d03a      	beq.n	8001552 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	799b      	ldrb	r3, [r3, #6]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d01b      	beq.n	800151c <LL_EXTI_Init+0xcc>
 80014e4:	dc25      	bgt.n	8001532 <LL_EXTI_Init+0xe2>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d002      	beq.n	80014f0 <LL_EXTI_Init+0xa0>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d00b      	beq.n	8001506 <LL_EXTI_Init+0xb6>
 80014ee:	e020      	b.n	8001532 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ff99 	bl	800142c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff ff62 	bl	80013c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001504:	e026      	b.n	8001554 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff ff6c 	bl	80013e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff ff79 	bl	800140c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800151a:	e01b      	b.n	8001554 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff51 	bl	80013c8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff ff6e 	bl	800140c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001530:	e010      	b.n	8001554 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
            break;
 800153a:	e00b      	b.n	8001554 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff ff0d 	bl	8001360 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff ff2a 	bl	80013a4 <LL_EXTI_DisableEvent_0_31>
 8001550:	e000      	b.n	8001554 <LL_EXTI_Init+0x104>
      }
 8001552:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}

08001562 <LL_GPIO_SetPinMode>:
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	435b      	muls	r3, r3
 8001576:	001a      	movs	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	189b      	adds	r3, r3, r2
 800157e:	43db      	mvns	r3, r3
 8001580:	400b      	ands	r3, r1
 8001582:	001a      	movs	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	435b      	muls	r3, r3
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	434b      	muls	r3, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}

0800159a <LL_GPIO_SetPinOutputType>:
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	401a      	ands	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	434b      	muls	r3, r1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <LL_GPIO_SetPinSpeed>:
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	435b      	muls	r3, r3
 80015d8:	001a      	movs	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	43db      	mvns	r3, r3
 80015e2:	400b      	ands	r3, r1
 80015e4:	001a      	movs	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	435b      	muls	r3, r3
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	434b      	muls	r3, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}

080015fc <LL_GPIO_SetPinPull>:
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	68d9      	ldr	r1, [r3, #12]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	435b      	muls	r3, r3
 8001610:	001a      	movs	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	189b      	adds	r3, r3, r2
 8001618:	43db      	mvns	r3, r3
 800161a:	400b      	ands	r3, r1
 800161c:	001a      	movs	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	435b      	muls	r3, r3
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	434b      	muls	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	60da      	str	r2, [r3, #12]
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_GPIO_SetAFPin_0_7>:
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a19      	ldr	r1, [r3, #32]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	435b      	muls	r3, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	4353      	muls	r3, r2
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	435a      	muls	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	43db      	mvns	r3, r3
 8001658:	400b      	ands	r3, r1
 800165a:	001a      	movs	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	435b      	muls	r3, r3
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	434b      	muls	r3, r1
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	434b      	muls	r3, r1
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	434b      	muls	r3, r1
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	621a      	str	r2, [r3, #32]
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}

0800167a <LL_GPIO_SetAFPin_8_15>:
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	0a12      	lsrs	r2, r2, #8
 8001692:	4353      	muls	r3, r2
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	0a12      	lsrs	r2, r2, #8
 8001698:	4353      	muls	r3, r2
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	0a12      	lsrs	r2, r2, #8
 800169e:	435a      	muls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	43db      	mvns	r3, r3
 80016a8:	400b      	ands	r3, r1
 80016aa:	001a      	movs	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	0a09      	lsrs	r1, r1, #8
 80016b4:	434b      	muls	r3, r1
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	0a09      	lsrs	r1, r1, #8
 80016ba:	434b      	muls	r3, r1
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	0a09      	lsrs	r1, r1, #8
 80016c0:	434b      	muls	r3, r1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	434b      	muls	r3, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016e6:	e048      	b.n	800177a <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4091      	lsls	r1, r2
 80016f2:	000a      	movs	r2, r1
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03a      	beq.n	8001774 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d003      	beq.n	800170e <LL_GPIO_Init+0x3a>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10e      	bne.n	800172c <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff ff54 	bl	80015c4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff ff37 	bl	800159a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ff61 	bl	80015fc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d111      	bne.n	8001766 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d807      	bhi.n	8001758 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff6f 	bl	8001634 <LL_GPIO_SetAFPin_0_7>
 8001756:	e006      	b.n	8001766 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff8a 	bl	800167a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff fef7 	bl	8001562 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	40da      	lsrs	r2, r3
 8001782:	1e13      	subs	r3, r2, #0
 8001784:	d1b0      	bne.n	80016e8 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}

08001790 <LL_RCC_HSI_IsReady>:
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LL_RCC_HSI_IsReady+0x1c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	2b04      	cmp	r3, #4
 800179e:	d101      	bne.n	80017a4 <LL_RCC_HSI_IsReady+0x14>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <LL_RCC_HSI_IsReady+0x16>
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000

080017b0 <LL_RCC_LSE_IsReady>:
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <LL_RCC_LSE_IsReady+0x24>)
 80017b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	401a      	ands	r2, r3
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d101      	bne.n	80017ca <LL_RCC_LSE_IsReady+0x1a>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LL_RCC_LSE_IsReady+0x1c>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000

080017d8 <LL_RCC_MSI_GetRange>:
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <LL_RCC_MSI_GetRange+0x14>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	23e0      	movs	r3, #224	; 0xe0
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	4013      	ands	r3, r2
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_GetSysClkSource>:
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <LL_RCC_GetSysClkSource+0x14>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	220c      	movs	r2, #12
 80017fa:	4013      	ands	r3, r2
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40021000 	.word	0x40021000

08001808 <LL_RCC_GetAHBPrescaler>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <LL_RCC_GetAHBPrescaler+0x14>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	22f0      	movs	r2, #240	; 0xf0
 8001812:	4013      	ands	r3, r2
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	40021000 	.word	0x40021000

08001820 <LL_RCC_GetAPB1Prescaler>:
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	23e0      	movs	r3, #224	; 0xe0
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4013      	ands	r3, r2
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000

08001838 <LL_RCC_GetAPB2Prescaler>:
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <LL_RCC_GetAPB2Prescaler+0x14>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	23e0      	movs	r3, #224	; 0xe0
 8001842:	019b      	lsls	r3, r3, #6
 8001844:	4013      	ands	r3, r2
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_RCC_GetUSARTClockSource+0x20>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	4313      	orrs	r3, r2
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b002      	add	sp, #8
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000

08001874 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <LL_RCC_PLL_GetMainSource+0x14>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4013      	ands	r3, r2
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	23f0      	movs	r3, #240	; 0xf0
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	4013      	ands	r3, r2
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <LL_RCC_PLL_GetDivider+0x14>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4013      	ands	r3, r2
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d101      	bne.n	80018d0 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d139      	bne.n	8001962 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0018      	movs	r0, r3
 80018f2:	f7ff ffad 	bl	8001850 <LL_RCC_GetUSARTClockSource>
 80018f6:	0003      	movs	r3, r0
 80018f8:	4a40      	ldr	r2, [pc, #256]	; (80019fc <LL_RCC_GetUSARTClockFreq+0x120>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01c      	beq.n	8001938 <LL_RCC_GetUSARTClockFreq+0x5c>
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <LL_RCC_GetUSARTClockFreq+0x120>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d821      	bhi.n	8001948 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001904:	4a3e      	ldr	r2, [pc, #248]	; (8001a00 <LL_RCC_GetUSARTClockFreq+0x124>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d003      	beq.n	8001912 <LL_RCC_GetUSARTClockFreq+0x36>
 800190a:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <LL_RCC_GetUSARTClockFreq+0x128>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d005      	beq.n	800191c <LL_RCC_GetUSARTClockFreq+0x40>
 8001910:	e01a      	b.n	8001948 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001912:	f000 f883 	bl	8001a1c <RCC_GetSystemClockFreq>
 8001916:	0003      	movs	r3, r0
 8001918:	60fb      	str	r3, [r7, #12]
        break;
 800191a:	e027      	b.n	800196c <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800191c:	f7ff ff38 	bl	8001790 <LL_RCC_HSI_IsReady>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d020      	beq.n	8001966 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001924:	f7ff ffca 	bl	80018bc <LL_RCC_IsActiveFlag_HSIDIV>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d002      	beq.n	8001932 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800192e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001930:	e019      	b.n	8001966 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <LL_RCC_GetUSARTClockFreq+0x130>)
 8001934:	60fb      	str	r3, [r7, #12]
        break;
 8001936:	e016      	b.n	8001966 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001938:	f7ff ff3a 	bl	80017b0 <LL_RCC_LSE_IsReady>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d014      	beq.n	800196a <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001946:	e010      	b.n	800196a <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001948:	f000 f868 	bl	8001a1c <RCC_GetSystemClockFreq>
 800194c:	0003      	movs	r3, r0
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f8a8 	bl	8001aa4 <RCC_GetHCLKClockFreq>
 8001954:	0003      	movs	r3, r0
 8001956:	0018      	movs	r0, r3
 8001958:	f000 f8ce 	bl	8001af8 <RCC_GetPCLK2ClockFreq>
 800195c:	0003      	movs	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
        break;
 8001960:	e004      	b.n	800196c <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	e002      	b.n	800196c <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	e000      	b.n	800196c <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800196a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d139      	bne.n	80019e6 <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ff6b 	bl	8001850 <LL_RCC_GetUSARTClockSource>
 800197a:	0003      	movs	r3, r0
 800197c:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <LL_RCC_GetUSARTClockFreq+0x134>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01c      	beq.n	80019bc <LL_RCC_GetUSARTClockFreq+0xe0>
 8001982:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <LL_RCC_GetUSARTClockFreq+0x134>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d821      	bhi.n	80019cc <LL_RCC_GetUSARTClockFreq+0xf0>
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <LL_RCC_GetUSARTClockFreq+0x138>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <LL_RCC_GetUSARTClockFreq+0xba>
 800198e:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <LL_RCC_GetUSARTClockFreq+0x13c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d005      	beq.n	80019a0 <LL_RCC_GetUSARTClockFreq+0xc4>
 8001994:	e01a      	b.n	80019cc <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001996:	f000 f841 	bl	8001a1c <RCC_GetSystemClockFreq>
 800199a:	0003      	movs	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
        break;
 800199e:	e027      	b.n	80019f0 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80019a0:	f7ff fef6 	bl	8001790 <LL_RCC_HSI_IsReady>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d020      	beq.n	80019ea <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80019a8:	f7ff ff88 	bl	80018bc <LL_RCC_IsActiveFlag_HSIDIV>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d002      	beq.n	80019b6 <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80019b2:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80019b4:	e019      	b.n	80019ea <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <LL_RCC_GetUSARTClockFreq+0x130>)
 80019b8:	60fb      	str	r3, [r7, #12]
        break;
 80019ba:	e016      	b.n	80019ea <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80019bc:	f7ff fef8 	bl	80017b0 <LL_RCC_LSE_IsReady>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d014      	beq.n	80019ee <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80019ca:	e010      	b.n	80019ee <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80019cc:	f000 f826 	bl	8001a1c <RCC_GetSystemClockFreq>
 80019d0:	0003      	movs	r3, r0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f866 	bl	8001aa4 <RCC_GetHCLKClockFreq>
 80019d8:	0003      	movs	r3, r0
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 f878 	bl	8001ad0 <RCC_GetPCLK1ClockFreq>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
        break;
 80019e4:	e004      	b.n	80019f0 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	e002      	b.n	80019f0 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	e000      	b.n	80019f0 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80019ee:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80019f0:	68fb      	ldr	r3, [r7, #12]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	00030003 	.word	0x00030003
 8001a00:	00030001 	.word	0x00030001
 8001a04:	00030002 	.word	0x00030002
 8001a08:	003d0900 	.word	0x003d0900
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	000c000c 	.word	0x000c000c
 8001a14:	000c0004 	.word	0x000c0004
 8001a18:	000c0008 	.word	0x000c0008

08001a1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001a22:	f7ff fee5 	bl	80017f0 <LL_RCC_GetSysClkSource>
 8001a26:	0003      	movs	r3, r0
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d020      	beq.n	8001a6e <RCC_GetSystemClockFreq+0x52>
 8001a2c:	d824      	bhi.n	8001a78 <RCC_GetSystemClockFreq+0x5c>
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d01a      	beq.n	8001a68 <RCC_GetSystemClockFreq+0x4c>
 8001a32:	d821      	bhi.n	8001a78 <RCC_GetSystemClockFreq+0x5c>
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <RCC_GetSystemClockFreq+0x22>
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d00b      	beq.n	8001a54 <RCC_GetSystemClockFreq+0x38>
 8001a3c:	e01c      	b.n	8001a78 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001a3e:	f7ff fecb 	bl	80017d8 <LL_RCC_MSI_GetRange>
 8001a42:	0003      	movs	r3, r0
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	3301      	adds	r3, #1
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	607b      	str	r3, [r7, #4]
      break;
 8001a52:	e01c      	b.n	8001a8e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001a54:	f7ff ff32 	bl	80018bc <LL_RCC_IsActiveFlag_HSIDIV>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d002      	beq.n	8001a62 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <RCC_GetSystemClockFreq+0x7c>)
 8001a5e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001a60:	e015      	b.n	8001a8e <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <RCC_GetSystemClockFreq+0x80>)
 8001a64:	607b      	str	r3, [r7, #4]
      break;
 8001a66:	e012      	b.n	8001a8e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <RCC_GetSystemClockFreq+0x84>)
 8001a6a:	607b      	str	r3, [r7, #4]
      break;
 8001a6c:	e00f      	b.n	8001a8e <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001a6e:	f000 f857 	bl	8001b20 <RCC_PLL_GetFreqDomain_SYS>
 8001a72:	0003      	movs	r3, r0
 8001a74:	607b      	str	r3, [r7, #4]
      break;
 8001a76:	e00a      	b.n	8001a8e <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001a78:	f7ff feae 	bl	80017d8 <LL_RCC_MSI_GetRange>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	0b5b      	lsrs	r3, r3, #13
 8001a80:	3301      	adds	r3, #1
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	607b      	str	r3, [r7, #4]
      break;
 8001a8c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	003d0900 	.word	0x003d0900
 8001a9c:	00f42400 	.word	0x00f42400
 8001aa0:	007a1200 	.word	0x007a1200

08001aa4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001aac:	f7ff feac 	bl	8001808 <LL_RCC_GetAHBPrescaler>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <RCC_GetHCLKClockFreq+0x28>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	001a      	movs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	40d3      	lsrs	r3, r2
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	08001e68 	.word	0x08001e68

08001ad0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ad8:	f7ff fea2 	bl	8001820 <LL_RCC_GetAPB1Prescaler>
 8001adc:	0003      	movs	r3, r0
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	40d3      	lsrs	r3, r2
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	08001e78 	.word	0x08001e78

08001af8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001b00:	f7ff fe9a 	bl	8001838 <LL_RCC_GetAPB2Prescaler>
 8001b04:	0003      	movs	r3, r0
 8001b06:	0adb      	lsrs	r3, r3, #11
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <RCC_GetPCLK2ClockFreq+0x24>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	40d3      	lsrs	r3, r2
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	08001e78 	.word	0x08001e78

08001b20 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b26:	f7ff fea5 	bl	8001874 <LL_RCC_PLL_GetMainSource>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001b34:	f7ff fec2 	bl	80018bc <LL_RCC_IsActiveFlag_HSIDIV>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d002      	beq.n	8001b42 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001b3e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001b40:	e005      	b.n	8001b4e <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001b44:	607b      	str	r3, [r7, #4]
      break;
 8001b46:	e002      	b.n	8001b4e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001b4a:	607b      	str	r3, [r7, #4]
      break;
 8001b4c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001b4e:	f7ff fe9d 	bl	800188c <LL_RCC_PLL_GetMultiplicator>
 8001b52:	0003      	movs	r3, r0
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4353      	muls	r3, r2
 8001b60:	001c      	movs	r4, r3
 8001b62:	f7ff fe9f 	bl	80018a4 <LL_RCC_PLL_GetDivider>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0d9b      	lsrs	r3, r3, #22
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	0020      	movs	r0, r4
 8001b70:	f7fe faca 	bl	8000108 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b003      	add	sp, #12
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	003d0900 	.word	0x003d0900
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	08001e80 	.word	0x08001e80

08001b90 <LL_USART_IsEnabled>:
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <LL_USART_IsEnabled+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_USART_IsEnabled+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <LL_USART_SetStopBitsLength>:
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <LL_USART_SetStopBitsLength+0x24>)
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	605a      	str	r2, [r3, #4]
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	ffffcfff 	.word	0xffffcfff

08001bdc <LL_USART_SetHWFlowCtrl>:
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <LL_USART_SetHWFlowCtrl+0x24>)
 8001bec:	401a      	ands	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	fffffcff 	.word	0xfffffcff

08001c04 <LL_USART_SetBaudRate>:
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d11c      	bne.n	8001c56 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	005a      	lsls	r2, r3, #1
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	18d3      	adds	r3, r2, r3
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fa6d 	bl	8000108 <__udivsi3>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <LL_USART_SetBaudRate+0x74>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	001a      	movs	r2, r3
 8001c44:	2307      	movs	r3, #7
 8001c46:	4013      	ands	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	60da      	str	r2, [r3, #12]
}
 8001c54:	e00c      	b.n	8001c70 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	085a      	lsrs	r2, r3, #1
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	18d3      	adds	r3, r2, r3
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe fa51 	bl	8000108 <__udivsi3>
 8001c66:	0003      	movs	r3, r0
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	60da      	str	r2, [r3, #12]
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b006      	add	sp, #24
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0000fff0 	.word	0x0000fff0

08001c7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001c86:	230f      	movs	r3, #15
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff ff7b 	bl	8001b90 <LL_USART_IsEnabled>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d145      	bne.n	8001d2a <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <LL_USART_Init+0xbc>)
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4319      	orrs	r1, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4319      	orrs	r1, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	430b      	orrs	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0011      	movs	r1, r2
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff ff72 	bl	8001bb4 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff ff7f 	bl	8001bdc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <LL_USART_Init+0xc0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d105      	bne.n	8001cf2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7ff fdf8 	bl	80018dc <LL_RCC_GetUSARTClockFreq>
 8001cec:	0003      	movs	r3, r0
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	e008      	b.n	8001d04 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <LL_USART_Init+0xc4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d104      	bne.n	8001d04 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001cfa:	200c      	movs	r0, #12
 8001cfc:	f7ff fdee 	bl	80018dc <LL_RCC_GetUSARTClockFreq>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00f      	beq.n	8001d2a <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8001d12:	230f      	movs	r3, #15
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff6d 	bl	8001c04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	efff69f3 	.word	0xefff69f3
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40004400 	.word	0x40004400

08001d44 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7fe f9d9 	bl	8000108 <__udivsi3>
 8001d56:	0003      	movs	r3, r0
 8001d58:	001a      	movs	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <LL_InitTick+0x30>)
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <LL_InitTick+0x30>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <LL_InitTick+0x30>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001d80:	23fa      	movs	r3, #250	; 0xfa
 8001d82:	009a      	lsls	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff ffdb 	bl	8001d44 <LL_InitTick>
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <LL_mDelay+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001da6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	d00c      	beq.n	8001dc8 <LL_mDelay+0x30>
  {
    Delay++;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3301      	adds	r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001db4:	e008      	b.n	8001dc8 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <LL_mDelay+0x40>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d002      	beq.n	8001dc8 <LL_mDelay+0x30>
    {
      Delay--;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f3      	bne.n	8001db6 <LL_mDelay+0x1e>
    }
  }
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b004      	add	sp, #16
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <LL_SetSystemCoreClock+0x18>)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	20000000 	.word	0x20000000

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	4d0c      	ldr	r5, [pc, #48]	; (8001e30 <__libc_init_array+0x38>)
 8001dfe:	4c0d      	ldr	r4, [pc, #52]	; (8001e34 <__libc_init_array+0x3c>)
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	2600      	movs	r6, #0
 8001e0a:	f000 f821 	bl	8001e50 <_init>
 8001e0e:	4d0a      	ldr	r5, [pc, #40]	; (8001e38 <__libc_init_array+0x40>)
 8001e10:	4c0a      	ldr	r4, [pc, #40]	; (8001e3c <__libc_init_array+0x44>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	00b3      	lsls	r3, r6, #2
 8001e1e:	58eb      	ldr	r3, [r5, r3]
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	00b3      	lsls	r3, r6, #2
 8001e28:	58eb      	ldr	r3, [r5, r3]
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08001e8c 	.word	0x08001e8c
 8001e34:	08001e8c 	.word	0x08001e8c
 8001e38:	08001e8c 	.word	0x08001e8c
 8001e3c:	08001e90 	.word	0x08001e90

08001e40 <memset>:
 8001e40:	0003      	movs	r3, r0
 8001e42:	1882      	adds	r2, r0, r2
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d100      	bne.n	8001e4a <memset+0xa>
 8001e48:	4770      	bx	lr
 8001e4a:	7019      	strb	r1, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	e7f9      	b.n	8001e44 <memset+0x4>

08001e50 <_init>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr

08001e5c <_fini>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr
